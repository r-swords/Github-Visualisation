{"ast":null,"code":"// @ts-nocheck\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n} // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\n\n\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n} // Calculate a one-sided slope.\n\n\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\n\nfunction _point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n\n        break;\n\n      case 3:\n        _point(this, this._t0, slope2(this, this._t0));\n\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    var t1 = NaN;\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n\n        _point(this, slope2(this, t1 = slope3(this, x, y)), t1);\n\n        break;\n\n      default:\n        _point(this, this._t0, t1 = slope3(this, x, y));\n\n        break;\n    }\n\n    ;\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n};\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n;\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function moveTo(x, y) {\n    this._context.moveTo(y, x);\n  },\n  closePath: function closePath() {\n    this._context.closePath();\n  },\n  lineTo: function lineTo(x, y) {\n    this._context.lineTo(y, x);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);\n  }\n};\nexport var monotoneX = function monotoneX(context) {\n  return new MonotoneX(context);\n};\nexport var monotoneY = function monotoneY(context) {\n  return new MonotoneY(context);\n};","map":{"version":3,"sources":["/home/ralph1/Documents/3rd_year/software_eng/react/github_visaulisation/node_modules/react-charts/es/utils/curveMonotone.js"],"names":["sign","x","slope3","that","x2","y2","h0","_x1","_x0","h1","s0","_y1","_y0","s1","p","Math","min","abs","slope2","t","h","_point","t0","t1","x0","y0","x1","y1","dx","_context","bezierCurveTo","MonotoneX","context","prototype","areaStart","_line","areaEnd","NaN","lineStart","_t0","lineEnd","lineTo","closePath","point","y","moveTo","MonotoneY","ReflectContext","Object","create","call","monotoneX","monotoneY"],"mappings":"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","sourcesContent":["// @ts-nocheck\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n} // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\n\n\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n} // Calculate a one-sided slope.\n\n\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\n\nfunction _point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n\n        break;\n\n      case 3:\n        _point(this, this._t0, slope2(this, this._t0));\n\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    var t1 = NaN;\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n\n        _point(this, slope2(this, t1 = slope3(this, x, y)), t1);\n\n        break;\n\n      default:\n        _point(this, this._t0, t1 = slope3(this, x, y));\n\n        break;\n    }\n\n    ;\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n};\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n;\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function moveTo(x, y) {\n    this._context.moveTo(y, x);\n  },\n  closePath: function closePath() {\n    this._context.closePath();\n  },\n  lineTo: function lineTo(x, y) {\n    this._context.lineTo(y, x);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);\n  }\n};\nexport var monotoneX = function monotoneX(context) {\n  return new MonotoneX(context);\n};\nexport var monotoneY = function monotoneY(context) {\n  return new MonotoneY(context);\n};"]},"metadata":{},"sourceType":"module"}