{"ast":null,"code":"var _jsxFileName = \"/home/ralph1/Documents/3rd_year/software_eng/githhub_api/github-get/github_visualisation/src/Line.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; //\n\nimport { Chart } from 'react-charts';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Line() {\n  _s();\n\n  const [commits, setCommits] = useState([]);\n  const [commit, set] = useState([]);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    await fetch('commitfile.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (myJson) {\n      set(myJson);\n      setCommitsData(myJson);\n    });\n  };\n\n  const setCommitsData = data => {\n    console.log(data);\n    var obj = {};\n\n    for (var commit in data) {\n      var commitDate = new Date(data[commit].commit.committer.date.substring(0, 10));\n\n      if (obj[commitDate]) {\n        obj[commitDate]++;\n      } else {\n        obj[commitDate] = 1;\n      }\n    }\n\n    var arr = [];\n\n    for (var node in obj) {\n      arr.push({\n        x: new Date(node),\n        y: obj[node]\n      });\n    }\n\n    console.log(arr);\n    var arr2 = [];\n    var currentDate = arr[arr.length - 1].x;\n    var max = arr[0].x;\n\n    while (currentDate <= max) {\n      var count;\n\n      if (obj[currentDate]) {\n        count = obj[currentDate];\n      } else {\n        count = 0;\n      }\n\n      arr2.push([new Date(currentDate), count]);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    setCommits(arr2);\n  };\n\n  const series = React.useMemo(() => ({\n    showPoints: false\n  }), []);\n  const commitData = React.useMemo(() => [{\n    label: 'Commit Count',\n    data: commits\n  }], []);\n  const lineAxes = React.useMemo(() => [{\n    primary: true,\n    type: 'utc',\n    position: 'bottom'\n  }, {\n    type: 'linear',\n    position: 'left'\n  }], []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      data: commitData,\n      series: series,\n      axes: lineAxes,\n      tooltip: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"commits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Line, \"87MSQbCEEfhCbkeELJD038N7e+w=\");\n\n_c = Line;\nexport default Line;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line\");","map":{"version":3,"sources":["/home/ralph1/Documents/3rd_year/software_eng/githhub_api/github-get/github_visualisation/src/Line.js"],"names":["React","Chart","useState","useEffect","Line","commits","setCommits","commit","set","getData","fetch","headers","then","response","json","myJson","setCommitsData","data","console","log","obj","commitDate","Date","committer","date","substring","arr","node","push","x","y","arr2","currentDate","length","max","count","setDate","getDate","series","useMemo","showPoints","commitData","label","lineAxes","primary","type","position"],"mappings":"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","sourcesContent":["import React from 'react'\n//\nimport { Chart } from 'react-charts'\nimport { useState, useEffect } from 'react';\n\nfunction Line (){\n\n  const [commits, setCommits] = useState([]);\n  const [commit, set] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  const getData= async ()=>{\n    await fetch('commitfile.json'\n    ,{\n      headers : {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        set(myJson);\n        setCommitsData(myJson);\n      });\n  }\n\n  const setCommitsData = (data) => {\n    console.log(data);\n    var obj = {};\n    for(var commit in data){\n      var commitDate = new Date(data[commit].commit.committer.date.substring(0,10));\n      if(obj[commitDate]){\n          obj[commitDate]++;\n      }\n      else {\n        obj[commitDate] = 1;\n      }\n    }\n    var arr = [];\n    for(var node in obj){\n        arr.push({x: new Date(node), y: obj[node]})\n    }\n    console.log(arr)\n    var arr2 = [];\n    var currentDate = arr[arr.length - 1].x;\n    var max = arr[0].x;\n    while(currentDate <= max){\n      var count;\n      if(obj[currentDate]){\n        count = obj[currentDate];\n      }\n      else{\n        count = 0;\n      }\n      arr2.push([new Date(currentDate),count]);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    setCommits(arr2);\n  }\n\n  const series = React.useMemo(\n    () => ({\n      showPoints: false\n    }),\n    []\n  )\n\n  const commitData = React.useMemo(\n    () => [\n      {\n        label: 'Commit Count',\n        data: commits\n      }\n    ],\n    [],\n  )\n  const lineAxes = React.useMemo(\n    () => [\n      { primary: true, type: 'utc', position: 'bottom' },\n      { type: 'linear', position: 'left' }\n    ],\n    []\n  )\n\n  return (\n    <div>\n    <Chart data={commitData} series={series} axes={lineAxes} tooltip></Chart>\n\n    <h1>commits</h1>\n    </div>\n  )\n\n}\n\nexport default Line\n"]},"metadata":{},"sourceType":"module"}